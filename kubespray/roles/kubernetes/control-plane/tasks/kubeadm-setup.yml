---
- name: Install OIDC certificate
  copy:
    content: "{{ kube_oidc_ca_cert | b64decode }}"
    dest: "{{ kube_oidc_ca_file }}"
    owner: root
    group: root
    mode: "0644"
  when:
    - kube_oidc_auth
    - kube_oidc_ca_cert is defined

- name: Kubeadm | Check if kubeadm has already run
  stat:
    path: "/var/lib/kubelet/config.yaml"
    get_attributes: false
    get_checksum: false
    get_mime: false
  register: kubeadm_already_run

- name: Kubeadm | Backup kubeadm certs / kubeconfig
  import_tasks: kubeadm-backup.yml
  when:
    - kubeadm_already_run.stat.exists

- name: Kubeadm | aggregate all SANs
  set_fact:
    apiserver_sans: "{{ (sans_base + groups['kube_control_plane'] + sans_lb + sans_lb_ip + sans_supp + sans_access_ip + sans_ip + sans_ipv4_address + sans_ipv6_address + sans_override + sans_hostname + sans_fqdn + sans_kube_vip_address) | unique }}"
  vars:
    sans_base:
      - "kubernetes"
      - "kubernetes.default"
      - "kubernetes.default.svc"
      - "kubernetes.default.svc.{{ dns_domain }}"
      - "{{ kube_apiserver_ip }}"
      - "localhost"
      - "127.0.0.1"
      - "::1"
    sans_lb: "{{ [apiserver_loadbalancer_domain_name] if apiserver_loadbalancer_domain_name is defined else [] }}"
    sans_lb_ip: "{{ [loadbalancer_apiserver.address] if loadbalancer_apiserver is defined and loadbalancer_apiserver.address is defined else [] }}"
    sans_supp: "{{ supplementary_addresses_in_ssl_keys if supplementary_addresses_in_ssl_keys is defined else [] }}"
    sans_access_ip: "{{ groups['kube_control_plane'] | map('extract', hostvars, 'main_access_ip') | list | select('defined') | list }}"
    sans_ip: "{{ groups['kube_control_plane'] | map('extract', hostvars, 'main_ip') | list | select('defined') | list }}"
    sans_ipv4_address: "{{ groups['kube_control_plane'] | map('extract', hostvars, ['ansible_default_ipv4', 'address']) | list | select('defined') | list }}"
    sans_ipv6_address: "{{ groups['kube_control_plane'] | map('extract', hostvars, ['ansible_default_ipv6', 'address']) | list | select('defined') | list }}"
    sans_override: "{{ [kube_override_hostname] if kube_override_hostname else [] }}"
    sans_hostname: "{{ groups['kube_control_plane'] | map('extract', hostvars, ['ansible_hostname']) | list | select('defined') | list }}"
    sans_fqdn: "{{ groups['kube_control_plane'] | map('extract', hostvars, ['ansible_fqdn']) | list | select('defined') | list }}"
    sans_kube_vip_address: "{{ [kube_vip_address] if kube_vip_address is defined and kube_vip_address else [] }}"
  tags: facts

- name: Create audit-policy directory
  file:
    path: "{{ audit_policy_file | dirname }}"
    state: directory
    mode: "0640"
  when: kubernetes_audit or kubernetes_audit_webhook

- name: Write api audit policy yaml
  template:
    src: apiserver-audit-policy.yaml.j2
    dest: "{{ audit_policy_file }}"
    mode: "0640"
  when: kubernetes_audit or kubernetes_audit_webhook
  notify: Control plane | Restart apiserver

- name: Write api audit webhook config yaml
  template:
    src: apiserver-audit-webhook-config.yaml.j2
    dest: "{{ audit_webhook_config_file }}"
    mode: "0640"
  when: kubernetes_audit_webhook
  notify: Control plane | Restart apiserver

- name: Create apiserver tracing config directory
  file:
    path: "{{ kube_config_dir }}/tracing"
    state: directory
    mode: "0640"
  when: kube_apiserver_tracing

- name: Write apiserver tracing config yaml
  template:
    src: apiserver-tracing.yaml.j2
    dest: "{{ kube_config_dir }}/tracing/apiserver-tracing.yaml"
    mode: "0640"
  when: kube_apiserver_tracing
  notify: Control plane | Restart apiserver

- name: Set kubeadm_config_api_fqdn define
  set_fact:
    kubeadm_config_api_fqdn: "{{ apiserver_loadbalancer_domain_name | default('lb-apiserver.kubernetes.local') }}"
  when: loadbalancer_apiserver is defined

- name: Kubeadm | Create kubeadm config
  template:
    src: "kubeadm-config.{{ kubeadm_config_api_version }}.yaml.j2"
    dest: "{{ kube_config_dir }}/kubeadm-config.yaml"
    mode: "0640"
    validate: "{{ kubeadm_config_validate_enabled | ternary(bin_dir + '/kubeadm config validate --config %s', omit) }}"

- name: Kubeadm | Create directory to store admission control configurations
  file:
    path: "{{ kube_config_dir }}/admission-controls"
    state: directory
    mode: "0640"
  when: kube_apiserver_admission_control_config_file

- name: Kubeadm | Push admission control config file
  template:
    src: "admission-controls.yaml.j2"
    dest: "{{ kube_config_dir }}/admission-controls/admission-controls.yaml"
    mode: "0640"
  when: kube_apiserver_admission_control_config_file
  notify: Control plane | Restart apiserver

- name: Kubeadm | Push admission control config files
  template:
    src: "{{ item | lower }}.yaml.j2"
    dest: "{{ kube_config_dir }}/admission-controls/{{ item | lower }}.yaml"
    mode: "0640"
  when:
    - kube_apiserver_admission_control_config_file
    - item in kube_apiserver_admission_plugins_needs_configuration
  loop: "{{ kube_apiserver_enable_admission_plugins }}"
  notify: Control plane | Restart apiserver

- name: Kubeadm | Check apiserver.crt SANs
  vars:
    apiserver_ips: "{{ apiserver_sans | map('ansible.utils.ipaddr') | reject('equalto', False) | list }}"
    apiserver_hosts: "{{ apiserver_sans | difference(apiserver_ips) }}"
  when:
    - kubeadm_already_run.stat.exists
    - not kube_external_ca_mode
  block:
    - name: Kubeadm | Check apiserver.crt SAN IPs
      command:
        cmd: "openssl x509 -noout -in {{ kube_cert_dir }}/apiserver.crt -checkip {{ item }}"
      loop: "{{ apiserver_ips }}"
      register: apiserver_sans_ip_check
      changed_when: apiserver_sans_ip_check.stdout is not search('does match certificate')
      failed_when: apiserver_sans_ip_check.rc != 0 and apiserver_sans_ip_check.stdout is not search('does NOT match certificate')

    - name: Kubeadm | Check apiserver.crt SAN hosts
      command:
        cmd: "openssl x509 -noout -in {{ kube_cert_dir }}/apiserver.crt -checkhost {{ item }}"
      loop: "{{ apiserver_hosts }}"
      register: apiserver_sans_host_check
      changed_when: apiserver_sans_host_check.stdout is not search('does match certificate')
      failed_when: apiserver_sans_host_check.rc != 0 and apiserver_sans_host_check.stdout is not search('does NOT match certificate')

- name: Kubeadm | regenerate apiserver cert 1/2
  file:
    state: absent
    path: "{{ kube_cert_dir }}/{{ item }}"
  with_items:
    - apiserver.crt
    - apiserver.key
  when:
    - kubeadm_already_run.stat.exists
    - apiserver_sans_ip_check.changed or apiserver_sans_host_check.changed
    - not kube_external_ca_mode

- name: Kubeadm | regenerate apiserver cert 2/2
  command: >-
    {{ bin_dir }}/kubeadm
    init phase certs apiserver
    --config={{ kube_config_dir }}/kubeadm-config.yaml
  when:
    - kubeadm_already_run.stat.exists
    - apiserver_sans_ip_check.changed or apiserver_sans_host_check.changed
    - not kube_external_ca_mode

- name: Kubeadm | Initialize first control plane node
  when: inventory_hostname == first_kube_control_plane and not kubeadm_already_run.stat.exists
  vars:
    kubeadm_init_first_control_plane_cmd: >-
      timeout -k {{ kubeadm_init_timeout }} {{ kubeadm_init_timeout }}
      {{ bin_dir }}/kubeadm init
      --config={{ kube_config_dir }}/kubeadm-config.yaml
      --ignore-preflight-errors={{ kubeadm_ignore_preflight_errors | join(',') }}
      --skip-phases={{ kubeadm_init_phases_skip | join(',') }}
      {{ kube_external_ca_mode | ternary('', '--upload-certs') }}
  environment:
    PATH: "{{ bin_dir }}:{{ ansible_env.PATH }}"
  notify: Control plane | restart kubelet
  block:
    - name: Kubeadm | Initialize first control plane node (1st try)
      command: "{{ kubeadm_init_first_control_plane_cmd }}"
      register: kubeadm_init
      failed_when: kubeadm_init.rc != 0 and "field is immutable" not in kubeadm_init.stderr
  rescue:
    - name: Kubeadm | Initialize first control plane node (retry)
      command: "{{ kubeadm_init_first_control_plane_cmd }}"
      register: kubeadm_init
      retries: 2
      delay: 10
      until: kubeadm_init.rc == 0 or "field is immutable" in kubeadm_init.stderr
      failed_when: kubeadm_init.rc != 0 and "field is immutable" not in kubeadm_init.stderr

- name: Kubeadm | Save join command
  shell: >
    {{ bin_dir }}/kubeadm token create --print-join-command
  register: kubeadm_join_cmd
  when: inventory_hostname == first_kube_control_plane
  changed_when: false

- name: Kubeadm | Write join command to file
  copy:
    content: "{{ kubeadm_join_cmd.stdout }}"
    dest: "/tmp/kubeadm_join_cmd.sh"
    mode: '0755'
  when: inventory_hostname == first_kube_control_plane

- name: Kubeadm | Join additional control plane nodes
  command: >
    {{ bin_dir }}/kubeadm join
    --config={{ kube_config_dir }}/kubeadm-config.yaml
    --control-plane
  when:
    - inventory_hostname != first_kube_control_plane
    - "'kubeadm join' not in ansible_local.kubeadm_join | default('')"
  register: kubeadm_join

- name: Kubeadm | Write kubeconfig for all control plane nodes
  command: >
    {{ bin_dir }}/kubectl --kubeconfig={{ kube_config_dir }}/admin.conf get nodes
  when: inventory_hostname == first_kube_control_plane
